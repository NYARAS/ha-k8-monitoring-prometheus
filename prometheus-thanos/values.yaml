# Default values for prometheus-thanos.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: nginx
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

# Thanos values
thanos:
  archive_bucket: thanos-prometheus-long-term
  gcs_secret: thanos-gcs-credentials
  image: quay.io/thanos/thanos:v0.28.0

  query:
    enabled: true
    replicas: 1
    # Other Query or Store Endpoints which need to be stacked should be specified here.
    extraArgs: {}
    #  store: <IP>:<PORT>
    resources:
      limits:
        cpu: "1"
        memory: 1Gi
      requests:
        cpu: 100m
        memory: 256Mi
    service:
      type: ClusterIP
    scrape:
      enabled: false
      type: LoadBalancer
      annotations:
        cloud.google.com/load-balancer-type: Internal

  compactor:
    enabled: true
    replicas: 1
    resources:
      limits:
        cpu: "1"
        memory: 1Gi
      requests:
        cpu: 100m
        memory: 256Mi

  store:
    enabled: true
    replicas: 1
    resources:
      limits:
        cpu: 1
        memory: 4Gi
      requests:
        cpu: 0.5
        memory: 1Gi

  ruler:
    enabled: true
    replicas: 1
    rules_bucket: prometheus-rules-archive
    service:
      type: ClusterIP
    resources:
      limits:
        cpu: "1"
        memory: 1Gi
      requests:
        cpu: 50m
        memory: 100Mi

# prometheus values
prometheus:
  enabled: true
  image: prom/prometheus:v2.4.3
  clusterName: my-prometheus
  replicas: 1
  storage: 20Gi
  resources:
    limits:
      cpu: "1"
      memory: 1Gi
    requests:
      cpu: 100m
      memory: 256Mi
